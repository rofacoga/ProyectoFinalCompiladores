/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package co.edu.uniquindio.compiladores.modelo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.json.simple.JSONObject;

public class Compilador implements CompiladorConstants {

  protected static JSONObject jsonTransport;

//	public static void main( String[] arg ) throws ParseException, TokenMgrError {
//		Compilador parser = new Compilador( System.in );
//		parser.start();
//	}

  public Compilador() {
        // Nothing to do here!
  }

  @SuppressWarnings("static-access")
  public String compilar( String codFuente ) {
    if( codFuente != "" && codFuente != null ) {

          InputStream codFuenteStream = new ByteArrayInputStream( codFuente.getBytes( StandardCharsets.UTF_8 )); //StandardCharsets.UTF_8 ) );
          Compilador parser = new Compilador( codFuenteStream );//System.in );

          String errores = "";

          try{
            parser.start();
          }catch (ParseException e){
                errores += e;
                ReInit( codFuenteStream );
          }

          return errores;

    }else {
      return "";
    }
  }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITOS:
      case LETRA_MIN:
      case SUMA:
      case RESTA:
      case SENO:
      case COSENO:
      case TANGENTE:
      case SECANTE:
      case COSECANTE:
      case COTANGENTE:
      case INTEGRAL:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      linea();
    }
    jj_consume_token(0);
  }

  static final public void linea() throws ParseException {
    expresionAritmetica();
    jj_consume_token(FINAL_LINEA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case LETRA_MIN:
    case SUMA:
    case RESTA:
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
    case INTEGRAL:
      linea();
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void expresionAritmetica() throws ParseException {
    termino();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
    case DIVISION:
    case MULTIPLICACION:
    case EXPONENTE:
    case MODULO:
      operadores();
      expresionAritmetica();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void termino() throws ParseException {
    factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
    case DIVISION:
    case MULTIPLICACION:
    case EXPONENTE:
    case MODULO:
      operadores();
      termino();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTIPLICACION:
      jj_consume_token(MULTIPLICACION);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    case EXPONENTE:
      jj_consume_token(EXPONENTE);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    case LETRA_MIN:
      identificador();
      break;
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
      expresionTrigonometrica();
      break;
    case INTEGRAL:
      integral();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void numeros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
      signo();
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(DIGITOS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO:
      jj_consume_token(PUNTO);
      jj_consume_token(DIGITOS);
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void signo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void identificador() throws ParseException {
    label_2:
    while (true) {
      letras();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MIN:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_2;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
      jj_consume_token(DIGITOS);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  static final public void letras() throws ParseException {
    jj_consume_token(LETRA_MIN);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MIN:
      case LETRA_MAY:
        ;
        break;
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MIN:
        jj_consume_token(LETRA_MIN);
        break;
      case LETRA_MAY:
        jj_consume_token(LETRA_MAY);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresionTrigonometrica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENO:
      jj_consume_token(SENO);
      teta();
      break;
    case COSENO:
      jj_consume_token(COSENO);
      teta();
      break;
    case TANGENTE:
      jj_consume_token(TANGENTE);
      teta();
      break;
    case COTANGENTE:
      jj_consume_token(COTANGENTE);
      teta();
      break;
    case SECANTE:
      jj_consume_token(SECANTE);
      teta();
      break;
    case COSECANTE:
      jj_consume_token(COSECANTE);
      teta();
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void teta() throws ParseException {
    jj_consume_token(PARENTESIS_IZQUIERDO);
    factorSimple();
    jj_consume_token(PARENTESIS_DERECHO);
  }

  static final public void integral() throws ParseException {
    jj_consume_token(INTEGRAL);
    jj_consume_token(PARENTESIS_IZQUIERDO);
    factorSimple();
    jj_consume_token(DX_INTEGRAL);
    jj_consume_token(COMA);
    limitesIntg();
    jj_consume_token(COMA);
    limitesIntg();
    jj_consume_token(PARENTESIS_DERECHO);
  }

  static final public void limitesIntg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LETRA_MIN:
      identificador();
      break;
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factorSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    case LETRA_MIN:
      identificador();
      break;
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
      expresionTrigonometrica();
      break;
    case INTEGRAL:
      integral();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x801f86c0,0x801f86c0,0x7e00,0x7e00,0x7e00,0x801f86c0,0x600,0x0,0x600,0x80,0x40,0x180,0x180,0x1f8000,0x6c0,0x801f86c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
