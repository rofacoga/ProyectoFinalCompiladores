/* Generated By:JavaCC: Do not edit this line. Compilador.java */
package co.edu.uniquindio.compiladores.modelo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
// import org.json.simple.JSONObject;

/**
 * 
 * @author Cesar Taborda
 * @author Yeison Gomez
 * @author Rogers Cordoba
 */
public class Compilador implements CompiladorConstants {
  private static String resultado;
  private static String errores;
  private static Compilador parser = null;

//	public static void main( String[] arg ) throws ParseException, TokenMgrError {
//		Compilador parser = new Compilador( System.in );
//		parser.start();
//	}

  public Compilador() {
        // Nothing to do here!
  }

  @SuppressWarnings("static-access")
  public void compilar( String codFuente ) throws ParseException, TokenMgrError {

    if( codFuente != "" && codFuente != null ) {

          InputStream codFuenteStream = new ByteArrayInputStream( codFuente.getBytes( StandardCharsets.UTF_8 )); //StandardCharsets.UTF_8 ) );
          // Compilador parser = new Compilador( codFuenteStream );//System.in );
          if( parser==null) parser = new Compilador( codFuenteStream ); else  ReInit( codFuenteStream );

          while (true) {
                try {
                  switch (parser.one_line()) {
                        case -1:
                          System.out.println("Finalizando");
                          return;
                          // System.exit(0);
                        default:
                          break;
                  }
                } catch (ParseException x) {
                  System.out.println("Finalizando");
                  throw x;
                } catch (TokenMgrError y) {
                  System.out.println("Finalizando");
                  throw y;
                }
          }
    }
  }

  public static String getErrores() {
        return errores;
  }

  public static String getResultado() {
        return resultado;
  }

// ------------------------------------------------------------
// -- Inicio de codigo del compilador para el analisis del
// --- codigo fuente...
// ------------------------------------------------------------
  static final public int one_line() throws ParseException {
    try {
      if (jj_2_1(2)) {
        expresionAritmetica();
        jj_consume_token(FINAL_LINEA);
                                              {if (true) return 1;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case FINAL_LINEA:
          jj_consume_token(FINAL_LINEA);
                                  {if (true) return 0;}
          break;
        case 0:
          jj_consume_token(0);
                          {if (true) return -1;}
          break;
        default:
          jj_la1[0] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (ParseException e) {
                error_skipto(FINAL_LINEA);
                {if (true) return 1;}
    }
    throw new Error("Missing return statement in function");
  }

  static final public void start() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DIGITOS:
      case LETRA_MIN:
      case SUMA:
      case RESTA:
      case SENO:
      case COSENO:
      case TANGENTE:
      case SECANTE:
      case COSECANTE:
      case COTANGENTE:
      case ENTERO:
      case DOBLE:
      case INTEGRAL:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      linea();
    }
    jj_consume_token(0);
  }

  static final public void linea() throws ParseException {
    expresionAritmetica();
    jj_consume_token(FINAL_LINEA);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case LETRA_MIN:
    case SUMA:
    case RESTA:
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
    case ENTERO:
    case DOBLE:
    case INTEGRAL:
      linea();
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void expresionAritmetica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
    case DOBLE:
      declaracionVariable();
      break;
    case DIGITOS:
    case LETRA_MIN:
    case SUMA:
    case RESTA:
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
    case INTEGRAL:
      termino();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SUMA:
      case RESTA:
      case DIVISION:
      case MULTIPLICACION:
      case EXPONENTE:
      case MODULO:
        operadores();
        expresionAritmetica();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void declaracionVariable() throws ParseException {
    tipoVariable();
    identificador();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASIGNACION:
      jj_consume_token(ASIGNACION);
      factor();
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static final public void tipoVariable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ENTERO:
      jj_consume_token(ENTERO);
      break;
    case DOBLE:
      jj_consume_token(DOBLE);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void termino() throws ParseException {
    factor();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
    case DIVISION:
    case MULTIPLICACION:
    case EXPONENTE:
    case MODULO:
      operadores();
      termino();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void operadores() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    case MULTIPLICACION:
      jj_consume_token(MULTIPLICACION);
      break;
    case DIVISION:
      jj_consume_token(DIVISION);
      break;
    case EXPONENTE:
      jj_consume_token(EXPONENTE);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    case LETRA_MIN:
      identificador();
      break;
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
      expresionTrigonometrica();
      break;
    case INTEGRAL:
      integral();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void numeros() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
    case RESTA:
      signo();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(DIGITOS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUNTO:
      jj_consume_token(PUNTO);
      jj_consume_token(DIGITOS);
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void signo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SUMA:
      jj_consume_token(SUMA);
      break;
    case RESTA:
      jj_consume_token(RESTA);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void identificador() throws ParseException {
    letras();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
      jj_consume_token(DIGITOS);
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void letras() throws ParseException {
    jj_consume_token(LETRA_MIN);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MIN:
      case LETRA_MAY:
        ;
        break;
      default:
        jj_la1[14] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LETRA_MIN:
        jj_consume_token(LETRA_MIN);
        break;
      case LETRA_MAY:
        jj_consume_token(LETRA_MAY);
        break;
      default:
        jj_la1[15] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void expresionTrigonometrica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENO:
      jj_consume_token(SENO);
      teta();
      break;
    case COSENO:
      jj_consume_token(COSENO);
      teta();
      break;
    case TANGENTE:
      jj_consume_token(TANGENTE);
      teta();
      break;
    case COTANGENTE:
      jj_consume_token(COTANGENTE);
      teta();
      break;
    case SECANTE:
      jj_consume_token(SECANTE);
      teta();
      break;
    case COSECANTE:
      jj_consume_token(COSECANTE);
      teta();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void teta() throws ParseException {
    jj_consume_token(PARENTESIS_IZQUIERDO);
    factorSimple();
    jj_consume_token(PARENTESIS_DERECHO);
  }

  static final public void integral() throws ParseException {
    jj_consume_token(INTEGRAL);
    jj_consume_token(PARENTESIS_IZQUIERDO);
    factorSimple();
    jj_consume_token(DX_INTEGRAL);
    jj_consume_token(COMA);
    limitesIntg();
    jj_consume_token(COMA);
    limitesIntg();
    jj_consume_token(PARENTESIS_DERECHO);
  }

  static final public void limitesIntg() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LETRA_MIN:
      identificador();
      break;
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void factorSimple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITOS:
    case SUMA:
    case RESTA:
      numeros();
      break;
    case LETRA_MIN:
      identificador();
      break;
    case SENO:
    case COSENO:
    case TANGENTE:
    case SECANTE:
    case COSECANTE:
    case COTANGENTE:
      expresionTrigonometrica();
      break;
    case INTEGRAL:
      integral();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static void error_skipto(int kind) throws ParseException {
        System.out.println( "Error!!!\u005cn" ); // Imprime el mensaje
        ParseException e = generateParseException(); // Genera el error sintactico
        System.out.println( e.toString()+"\u005cn" ); // Imprime el mensaje
        errores +=  e.toString()+"\u005cn";

        Token t;

        do {
                t = getNextToken();
        } while (t.kind != kind);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(INTEGRAL)) return true;
    if (jj_scan_token(PARENTESIS_IZQUIERDO)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_scan_token(PARENTESIS_IZQUIERDO)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(8)) return true;
    }
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(COSECANTE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_3()) return true;
    if (jj_scan_token(FINAL_LINEA)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(SECANTE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(COTANGENTE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(TANGENTE)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(COSENO)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(SENO)) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(PUNTO)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_11()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LETRA_MIN)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(29)) return true;
    }
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(6)) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_9()) return true;
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(10)) return true;
    }
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_7()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_4()) {
    jj_scanpos = xsp;
    if (jj_3R_5()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_10()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_22()) jj_scanpos = xsp;
    if (jj_scan_token(DIGITOS)) return true;
    xsp = jj_scanpos;
    if (jj_3R_23()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompiladorTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1,0xb01f86c0,0xb01f86c0,0x7e00,0xb01f86c0,0x0,0x30000000,0x7e00,0x7e00,0x801f86c0,0x600,0x0,0x600,0x40,0x180,0x180,0x1f8000,0x6c0,0x801f86c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x10,0x0,0x0,0x0,0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Compilador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilador(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Compilador(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompiladorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Compilador(CompiladorTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CompiladorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[37];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 37; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
