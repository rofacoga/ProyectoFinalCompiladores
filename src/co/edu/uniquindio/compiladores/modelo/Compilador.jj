PARSER_BEGIN( Compilador )
package co.edu.uniquindio.compiladores.modelo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
// import org.json.simple.JSONObject;

/**
 * 
 * @author Cesar Taborda
 * @author Yeison Gomez
 * @author Rogers Cordoba
 */
public class Compilador {
  private static String resultado;
  private static String errores;
  private static Compilador parser = null;
	
//	public static void main( String[] arg ) throws ParseException, TokenMgrError {
//		Compilador parser = new Compilador( System.in );
//		parser.start();
//	}
	
  public Compilador() {
	// Nothing to do here!
  }

  @SuppressWarnings("static-access")
  public void compilar( String codFuente ) throws ParseException, TokenMgrError {
    
    if( codFuente != "" && codFuente != null ) {
      
	  InputStream codFuenteStream = new ByteArrayInputStream( codFuente.getBytes( StandardCharsets.UTF_8 )); //StandardCharsets.UTF_8 ) );
	  // Compilador parser = new Compilador( codFuenteStream );//System.in );
	  if( parser==null) parser = new Compilador( codFuenteStream ); else  ReInit( codFuenteStream );

	  while (true) {
	 	try {
	 	  switch (parser.one_line()) {
	 		case -1:
	 		  System.out.println("Final de Compilación.");
	 		  this.resultado += "\n"+"Final de Compilación.";
	 		  return;
	 		  // System.exit(0);
	 	  	default:
	 		  break;
	 	  }
	 	} catch (ParseException x) {
	 	  errores += "Finalizando con Errores ParseException..."+"\n";
	 	  System.out.println("Finalizando con Errores ParseException...");
	 	  throw x;
	 	} catch (TokenMgrError y) {
	 	  errores += "Finalizando con Errores TokenMgrError..."+"\n";
	 	  System.out.println("Finalizando con Errores TokenMgrError...");
	 	  throw y;
	 	}
	  }
    }
  }

  public static String getErrores() {
	return errores;
  }

  public static String getResultado() {
	return resultado;
  }
  
}
PARSER_END( Compilador )

SKIP : {
" "
| "\n"
| "\r"
| "\r\n"
| "\t"
}

TOKEN : {
  < DIGITOS 			: (["0"-"9"])+ >
| < LETRA_MIN 			: (["a"-"z"]) >
| < LETRA_MAY 			: (["A"-"Z"]) >
| < SUMA 				: "+" >
| < RESTA 				: "-" >
| < DIVISION 			: "/" >
| < MULTIPLICACION 		: "*" >
| < EXPONENTE 			: "^" >
| < MODULO 				: "%" >
| < SENO 				: "Sen" >
| < COSENO 				: "Cos" >
| < TANGENTE 			: "Tan" >
| < SECANTE 			: "Sec" >
| < COSECANTE 			: "Csc" >
| < COTANGENTE 			: "Cot" >
| < PARENTESIS_IZQUIERDO : "(" >
| < PARENTESIS_DERECHO 	: ")" >
| < LLAVE_IZQUIERDA 	: "{" >
| < LLAVE_DERECHA 		: "}" >
| < CORCHETE_IZQUIERDO 	: "[" >
| < CORCHETE_DERECHO 	: "]" >
| < RAIZ 				: "Rai" >
| < ENTERO 				: "Ent" >
| < DOBLE 				: "Dob" >
| < FLOTANTE 			: "Flot" >
| < INTEGRAL 			: "Intg" >
| < DX_INTEGRAL 		: "Dx" >
| < ASIGNACION 			: "=" >
| < COMA 				: "," >
| < PUNTO 				: "." >
| < FINAL_LINEA 		: ";" >
}


// ------------------------------------------------------------
// -- Inicio de codigo del compilador para el analisis del
// --- codigo fuente...
// ------------------------------------------------------------
int one_line() :
{}
{
	try {
	LOOKAHEAD(2)
	
	expresionAritmetica() <FINAL_LINEA> { return 1; }
		| <FINAL_LINEA> { return 0; }
		| <EOF> { return -1; }
	} catch(ParseException e) {
		error_skipto(FINAL_LINEA);
		return 1;
	}
}

void start():
{}
{
  ( linea() )* <EOF>
}

void linea():
{}
{
  expresionAritmetica() < FINAL_LINEA > [ linea() ]
}

void expresionAritmetica():
{}
{
  declaracionVariable()  
| termino() [ operadores() expresionAritmetica() ]
}

void declaracionVariable():
{}
{
  tipoVariable() identificador() [ < ASIGNACION > factor() ]
}

void tipoVariable():
{}
{
  < ENTERO >
| < DOBLE >
}

void termino():
{}
{
  factor() [ operadores() termino() ]
}

void operadores():
{}
{
  < SUMA > | < RESTA > | < MULTIPLICACION > | < DIVISION > | < EXPONENTE > | < MODULO >
}

void factor():
{}
{
  numeros() | identificador() | expresionTrigonometrica() | integral() 
}

void numeros(): // Object numeros():
{
  // para retornar la imagen
  /* return ( Token.toString().matches("[+-]?\\d*") && Token.toString().equals("")==false )
  			? new DatosToken( "entero", Integer.parseInt( Token.toString() ) )
  			: new DatosToken( "doble", Double.parseDouble( Token.toString() ) ); */
}
{
  [signo()] < DIGITOS > [ < PUNTO > < DIGITOS >]
}

void signo():
{}
{
  < SUMA > | < RESTA >
}

void identificador():
{}
{
  letras() [ < DIGITOS > ]
}

void letras():
{}
{
  < LETRA_MIN > ( < LETRA_MIN > | < LETRA_MAY > )*
}

void expresionTrigonometrica():
{}
{
  < SENO > teta()
  | < COSENO > teta()
  | < TANGENTE > teta()
  | < COTANGENTE > teta()
  | < SECANTE > teta()
  | < COSECANTE > teta()
}

void teta():
{}
{
  < PARENTESIS_IZQUIERDO > factorSimple() < PARENTESIS_DERECHO >
}

void integral():
{}
{
  < INTEGRAL > < PARENTESIS_IZQUIERDO > factorSimple() < DX_INTEGRAL > < COMA > limitesIntg() < COMA > limitesIntg() < PARENTESIS_DERECHO >
}

void limitesIntg():
{}
{
  identificador() | numeros()
}

void factorSimple():
{}
{
  numeros() | identificador() | expresionTrigonometrica() | integral() 
}

// ------------------------------------------------------------
// -- Parte de codigo de java para el salto de errores
// ------------------------------------------------------------
JAVACODE
void error_skipto(int kind) {
	System.out.println( "Error!!!\n" ); // Imprime el mensaje
	ParseException e = generateParseException(); // Genera el error sintactico
	System.out.println( e.toString()+"\n" ); // Imprime el mensaje
	this.errores +=  e.toString()+"\n";
	
	Token t;
	
	do {
		t = getNextToken();
	} while (t.kind != kind);
	// El ciclo de arriba consume todos los tokens hasta encontrar el token tipo
	// Se usa un do-while por que el toke actual, es aquel que esta
	//inmediantamente antes del token erroneo
}