PARSER_BEGIN( Compilador )
package co.edu.uniquindio.compiladores.modelo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.json.simple.JSONObject;

public class Compilador {

  protected static JSONObject jsonTransport;
	
//	public static void main( String[] arg ) throws ParseException, TokenMgrError {
//		Compilador parser = new Compilador( System.in );
//		parser.start();
//	}
	
  public Compilador() {
	// Nothing to do here!
  }

  @SuppressWarnings("static-access")
  public boolean compilar( String codFuente ) {
    if( codFuente != "" && codFuente != null ) {
	  InputStream codFuenteStream = new ByteArrayInputStream( codFuente.getBytes( StandardCharsets.UTF_8 )); //StandardCharsets.UTF_8 ) );
	  Compilador parser = new Compilador( codFuenteStream );//System.in );

	  try {
	    parser.start();
	  } catch (ParseException e) {
	    // TODO Auto-generated catch block
	    e.printStackTrace();
	  }

	  return true;

    }else {
      return false;
    }
  }
  
}
PARSER_END( Compilador )

SKIP : {
	" "
| "\n"
| "\r"
| "\r\n"
| "\t"
}

TOKEN : {
  < SUMA : "+" >
| < NUMERO : (["0"-"9"])+>
| < RESTA: "-" >
| < DIVISION : "/" >
| < MULTIPLICACION : "*" >
| < EXPONENTE : "^" >
| < FINAL_LINEA : ";" >
| < SENO : "sen" >
| < COSENO : "cos" >
| < TANGENTE : "tan" >
| < SECANTE : "sec" >
| < COSECANTE : "csc" >
| < COTAGENTE : "cot" >
| < PARENTESIS_IZQUIERDO : "(" >
| < PARENTESIS_DERECHO : ")" >
| < LLAVE_IZQUIERDA : "{" >
| < LLAVE_DERECHA : "}" >
| < CORCHETE_IZQUIERDO : "[" >
| < CORCHETE_DERECHO : "]" >
| < RAIZ : "rai" >
| < ENTERO : "ent" >
| < DOBLE : "dob" >
| < FLOTANTE : "flot" >
| < INTEGRAL : "int" >
| < ASIGNACION : "=" >
| < PUNTO : "." >
}

void start():
{}
{
  ( <SUMA>
    | <NUMERO>
    | <RESTA>
    | <DIVISION>
    | <MULTIPLICACION>
    | <EXPONENTE>
    | <FINAL_LINEA>
    | <SENO>
    | <COSENO>
  	| <TANGENTE>
  	| <SECANTE>
  	| <COSECANTE>
  	| <COTAGENTE>
  	| <PARENTESIS_IZQUIERDO>
  	| <PARENTESIS_DERECHO>
  	| <LLAVE_IZQUIERDA>
  	| <LLAVE_DERECHA>
  	| <CORCHETE_IZQUIERDO>
  	| <CORCHETE_DERECHO>
  	| <RAIZ>
  	| <ENTERO>
  	| <DOBLE>
  	| <FLOTANTE>
  	| <INTEGRAL>
  	| <ASIGNACION> )* <EOF>
}
