PARSER_BEGIN( Compilador )
package co.edu.uniquindio.compiladores.modelo;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.json.simple.JSONObject;

public class Compilador {

  protected static JSONObject jsonTransport;
	
//	public static void main( String[] arg ) throws ParseException, TokenMgrError {
//		Compilador parser = new Compilador( System.in );
//		parser.start();
//	}
	
  public Compilador() {
	// Nothing to do here!
  }

  @SuppressWarnings("static-access")
  public String compilar( String codFuente ) {
    if( codFuente != "" && codFuente != null ) {
      
	  InputStream codFuenteStream = new ByteArrayInputStream( codFuente.getBytes( StandardCharsets.UTF_8 )); //StandardCharsets.UTF_8 ) );
	  Compilador parser = new Compilador( codFuenteStream );//System.in );

  	  String errores = "";

	  try{
	    parser.start();
	  }catch (ParseException e){
		errores += e;
		ReInit( codFuenteStream );
	  }

	  return errores;

    }else {
      return "";
    }
  }
  
}
PARSER_END( Compilador )

SKIP : {
	" "
| "\n"
| "\r"
| "\r\n"
| "\t"
}

TOKEN : {
  < DIGITOS 			: (["0"-"9"])+ >
| < LETRA_MIN 			: (["a"-"z"]) >
| < LETRA_MAY 			: (["A"-"Z"]) >
| < SUMA 				: "+" >
| < RESTA 				: "-" >
| < DIVISION 			: "/" >
| < MULTIPLICACION 		: "*" >
| < EXPONENTE 			: "^" >
| < MODULO 				: "%" >
| < SENO 				: "Sen" >
| < COSENO 				: "Cos" >
| < TANGENTE 			: "Tan" >
| < SECANTE 			: "Sec" >
| < COSECANTE 			: "Csc" >
| < COTANGENTE 			: "Cot" >
| < PARENTESIS_IZQUIERDO : "(" >
| < PARENTESIS_DERECHO 	: ")" >
| < LLAVE_IZQUIERDA 	: "{" >
| < LLAVE_DERECHA 		: "}" >
| < CORCHETE_IZQUIERDO 	: "[" >
| < CORCHETE_DERECHO 	: "]" >
| < RAIZ 				: "Rai" >
| < ENTERO 				: "Ent" >
| < DOBLE 				: "Dob" >
| < FLOTANTE 			: "Flot" >
| < INTEGRAL 			: "Intg" >
| < DX_INTEGRAL 		: "Dx" >
| < ASIGNACION 			: "=" >
| < COMA 				: "," >
| < PUNTO 				: "." >
| < FINAL_LINEA 		: ";" >
}

void start():
{}
{
  ( linea() )* <EOF>
}

void linea():
{}
{
  expresionAritmetica() < FINAL_LINEA > [ linea() ]
}

void expresionAritmetica():
{}
{
  termino() [ operadores() expresionAritmetica() ]
}

void termino():
{}
{
  factor() [ operadores() termino() ]
}

void operadores():
{}
{
  < SUMA > | < RESTA > | < MULTIPLICACION > | < DIVISION > | < EXPONENTE > | < MODULO >
}

void factor():
{}
{
  numeros() | identificador() | expresionTrigonometrica() | integral() 
}

void numeros():
{} {
  [signo()] < DIGITOS > [ < PUNTO > < DIGITOS >]
}

void signo():
{}
{
  < SUMA > | < RESTA >
}

void identificador():
{}
{
  ( letras() )+ [ < DIGITOS > ]
}

void letras():
{}
{
  < LETRA_MIN > ( < LETRA_MIN > | < LETRA_MAY > )*
}

void expresionTrigonometrica():
{}
{
  < SENO > teta()
  | < COSENO > teta()
  | < TANGENTE > teta()
  | < COTANGENTE > teta()
  | < SECANTE > teta()
  | < COSECANTE > teta()
}

void teta():
{}
{
  < PARENTESIS_IZQUIERDO > factorSimple() < PARENTESIS_DERECHO >
}

void integral():
{}
{
  < INTEGRAL > < PARENTESIS_IZQUIERDO > factorSimple() < DX_INTEGRAL > < COMA > limitesIntg() < COMA > limitesIntg() < PARENTESIS_DERECHO >
}

void limitesIntg():
{}
{
  identificador() | numeros()
}

void factorSimple():
{}
{
  numeros() | identificador() | expresionTrigonometrica() | integral() 
}